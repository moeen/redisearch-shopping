// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/moeen/redisearch-shopping/pkg/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockStorage) AddProduct(product *models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockStorageMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockStorage)(nil).AddProduct), product)
}

// AddToCart mocks base method.
func (m *MockStorage) AddToCart(customerID, productID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", customerID, productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockStorageMockRecorder) AddToCart(customerID, productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockStorage)(nil).AddToCart), customerID, productID, quantity)
}

// CreateCustomer mocks base method.
func (m *MockStorage) CreateCustomer(email, name, hash string) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", email, name, hash)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockStorageMockRecorder) CreateCustomer(email, name, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockStorage)(nil).CreateCustomer), email, name, hash)
}

// GetCartItems mocks base method.
func (m *MockStorage) GetCartItems(customerID int) ([]*models.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", customerID)
	ret0, _ := ret[0].([]*models.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockStorageMockRecorder) GetCartItems(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockStorage)(nil).GetCartItems), customerID)
}

// GetCustomer mocks base method.
func (m *MockStorage) GetCustomer(id int) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", id)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockStorageMockRecorder) GetCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockStorage)(nil).GetCustomer), id)
}

// GetCustomerByEmail mocks base method.
func (m *MockStorage) GetCustomerByEmail(email string) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByEmail", email)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByEmail indicates an expected call of GetCustomerByEmail.
func (mr *MockStorageMockRecorder) GetCustomerByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByEmail", reflect.TypeOf((*MockStorage)(nil).GetCustomerByEmail), email)
}

// RemoveFromCart mocks base method.
func (m *MockStorage) RemoveFromCart(customerID, productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", customerID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockStorageMockRecorder) RemoveFromCart(customerID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockStorage)(nil).RemoveFromCart), customerID, productID)
}

// SearchProducts mocks base method.
func (m *MockStorage) SearchProducts(name *string) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", name)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockStorageMockRecorder) SearchProducts(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockStorage)(nil).SearchProducts), name)
}
